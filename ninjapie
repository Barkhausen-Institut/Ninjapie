#!/usr/bin/env python3

import argparse
from glob import glob
import os
import subprocess
import sys


def all_files():
    """Collects a string with all files found by the patters in the globs file"""
    files = ''
    try:
        with open(build_dir + '/.build.globs', 'r') as file:
            for line in file.readlines():
                files += '\n'.join(glob(line.strip(), recursive=True))
                files += '\n'
    except FileNotFoundError:
        pass
    return files


def remove_dir(path):
    """Removes the given directory recursively"""
    for d in os.listdir(path):
        try:
            remove_dir(path + '/' + d)
        except OSError:
            os.remove(path + '/' + d)
    os.rmdir(path)


root_dir = os.path.dirname(os.path.realpath(__file__))

# determine and create build dir
build_dir = os.environ.setdefault('NPBUILD', 'build')
if not os.path.isdir(build_dir):
    os.makedirs(build_dir)

# parse command line arguments
ninja_args = []
if len(sys.argv) > 1:
    if sys.argv[1] == 'clean':
        remove_dir(build_dir)
        sys.exit(0)
    elif sys.argv[1] == '-h' or sys.argv[1] == '--help':
        print("Usage: " + sys.argv[0] + " [clean] [-h|--help] [--] [<ninja-arg> ...]")
        print("")
        print("Ninjapie supports the following commands:")
        print("  clean:     remove the build directory")
        print("  -h|--help: print this help")
        print("")
        print("The remaining arguments, possibly prefixed by `--', are sent to ninja.")
        sys.exit(0)
    elif sys.argv[1] == '--':
        ninja_args = sys.argv[2:]
    else:
        ninja_args = sys.argv[1:]

# export PYTHONPATH to find the ninjapie modules
python_path = os.environ.setdefault('PYTHONPATH', '')
os.environ['PYTHONPATH'] = root_dir + ':' + python_path

reconf = False
all_files_path = build_dir + '/.build.files'

# check whether files have been added or removed
try:
    old_files = open(all_files_path, 'r').read()
    new_files = all_files()
    # if the list of files changed, we need to reconfigure
    reconf = old_files != new_files
except FileNotFoundError:
    reconf = True
    pass

build_file = build_dir + '/build.ninja'

# run configure if not done before or it's required
if reconf or not os.path.isfile(build_file):
    try:
        # run build.py, but don't write *.pyc files
        subprocess.check_call(['python3', '-B', 'build.py'])
    except:
        sys.exit(1)

    # store new list of files from globs
    new_files = all_files()
    with open(all_files_path, 'w') as file:
        file.write(new_files)

# now build everything with ninja
try:
    subprocess.check_call(['ninja', '-f', build_file] + ninja_args, stdout=sys.stderr.buffer)
except:
    # ensure that we regenerate the build.ninja next time. Since ninja does not accept the
    # build.ninja, it will also not detect changes our build files in order to regenerate it.
    # Therefore, force a regenerate next time by removing the file.
    os.remove(all_files_path)
    sys.exit(1)
